{"ast":null,"code":"var _jsxFileName = \"/Users/omniaelglad/Desktop/ruby/Ruby_Project_4/reservation_deluxe/client/src/components/HotelsContainer.js\";\nimport React, { Component } from 'react';\nimport { Route, withRouter, Link } from 'react-router-dom';\nimport { indexHotels, postHotel, putHotel, verifyUser } from '../services/api_helper';\nimport CreateHotelList from './CreateHotelList';\nimport SingleHotel from './SingleHotel';\nimport HotelForm from './HotelForm';\nimport UpdateHotelForm from './UpdateHotelForm';\n\nclass HotelContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getAllHotels = async () => {\n      const hotels = await indexHotels();\n      this.setState({\n        hotels\n      });\n    };\n\n    this.createHotel = async hotelData => {\n      console.log(hotelData);\n      const newHotel = await postHotel(hotelData);\n      this.setState({\n        hotels: [...this.state.hotels, newHotel]\n      });\n      this.props.history.push(\"/hotels\");\n    };\n\n    this.updateHotel = async (id, hotelData) => {\n      const updatedHotel = await putHotel(id, hotelData);\n      const changedHotels = this.state.hotels.map(hotel => parseInt(hotel.id) === parseInt(id) ? updatedHotel : hotel);\n      console.log(changedHotels);\n      this.setState({\n        hotels: changedHotels\n      });\n      this.props.history.push(\"/hotels\");\n    };\n\n    this.state = {\n      hotels: [{\n        hotel_name: \"\",\n        city: \"\",\n        state: \"\",\n        zip_code: \"\",\n        biography: \"\",\n        imagelink: \"\"\n      }]\n    };\n  }\n\n  componentDidMount() {\n    verifyUser();\n    this.getAllHotels();\n  } // READ ALL THE TODOS\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/hotels\",\n      render: () => React.createElement(CreateHotelList, {\n        hotels: this.state.hotels,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(Link, {\n      to: \"/hotels/new\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Add a Hotel To Your List\"), React.createElement(Route, {\n      exact: true,\n      path: \"/hotels/new\",\n      render: () => React.createElement(HotelForm, {\n        createHotel: this.createHotel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/hotels/:id\",\n      render: props => React.createElement(SingleHotel, {\n        hotelId: props.match.params.id,\n        hotels: this.state.hotels,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default withRouter(HotelContainer);","map":{"version":3,"sources":["/Users/omniaelglad/Desktop/ruby/Ruby_Project_4/reservation_deluxe/client/src/components/HotelsContainer.js"],"names":["React","Component","Route","withRouter","Link","indexHotels","postHotel","putHotel","verifyUser","CreateHotelList","SingleHotel","HotelForm","UpdateHotelForm","HotelContainer","constructor","props","getAllHotels","hotels","setState","createHotel","hotelData","console","log","newHotel","state","history","push","updateHotel","id","updatedHotel","changedHotels","map","hotel","parseInt","hotel_name","city","zip_code","biography","imagelink","componentDidMount","render","match","params"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Route, withRouter, Link } from 'react-router-dom';\nimport { indexHotels, postHotel , putHotel, verifyUser } from '../services/api_helper';\nimport CreateHotelList from './CreateHotelList';\nimport SingleHotel from './SingleHotel';\nimport HotelForm from './HotelForm';\nimport UpdateHotelForm from './UpdateHotelForm';\n\nclass HotelContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hotels: [{\n      hotel_name: \"\",\n      city: \"\",\n      state: \"\",\n      zip_code: \"\",\n      biography: \"\",\n      imagelink: \"\"\n      }]\n    }\n  }\n\n  componentDidMount() {\n    verifyUser();\n    this.getAllHotels();\n  }\n\n  // READ ALL THE TODOS\n  getAllHotels = async () => {\n    const hotels = await indexHotels();\n    this.setState({ hotels});\n  }\n\n  //CREATE THE TODO\n  createHotel = async (hotelData) => {\n    console.log(hotelData);\n    const newHotel = await postHotel(hotelData);\n    this.setState({\n      hotels: [...this.state.hotels, newHotel]\n    })\n    this.props.history.push(\"/hotels\");\n  }\n\n  // UPDATE THE TODO\n  updateHotel = async (id, hotelData) => {\n    const updatedHotel = await putHotel(id, hotelData);\n    const changedHotels = this.state.hotels.map(hotel => parseInt(hotel.id) === parseInt(id) ? updatedHotel : hotel);\n    console.log(changedHotels);\n    this.setState({ hotels: changedHotels });\n    this.props.history.push(\"/hotels\");\n  }\n\n  render() {\n    return (\n      <div>\n        <Route exact path=\"/hotels\" render={() => (\n          <CreateHotelList\n            hotels={this.state.hotels}\n          />\n        )} />\n        <Link to=\"/hotels/new\">Add a Hotel To Your List</Link>\n        <Route exact path=\"/hotels/new\" render={() => (\n          <HotelForm\n            createHotel={this.createHotel}\n          />\n        )} />\n        <Route exact path=\"/hotels/:id\" render={(props) => (\n          <SingleHotel\n            hotelId={props.match.params.id}\n            hotels={this.state.hotels}\n          />\n        )} />\n        {/* <Route path=\"/hotels/:id/edit\" render={(props) => (\n          <UpdateHotelForm\n          hotels={this.state.hotels}\n            updatehotel={this.updateHotel}\n            hotelId={props.match.params.id}\n          />\n        )} /> */}\n      </div>\n    )\n  }\n}\n\nexport default withRouter(HotelContainer);\n"]},"metadata":{},"sourceType":"module"}