{"ast":null,"code":"var _jsxFileName = \"/Users/omniaelglad/Desktop/ruby/Ruby_Project_4/reservation_deluxe/client/src/components/ReservationContainer.js\";\nimport React, { Component } from 'react';\nimport { Route, withRouter } from 'react-router-dom';\nimport { indexReservations, postReservation, putReservation, verifyUser } from '../services/api_helper';\nimport CreateReservationList from './CreateReservationList';\nimport SingleReservation from './SingleReservation';\nimport ReservationForm from './ReservationForm';\nimport UpdateReservationForm from './UpdateReservationForm';\n\nclass ReservationContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getAllReservations = async id => {\n      const reservations = await indexReservations(id);\n      this.setState({\n        reservations\n      });\n    };\n\n    this.createReservation = async reservationData => {\n      console.log(reservationData);\n      const newReservation = await postReservation(reservationData);\n      this.setState({\n        hotels: [...this.state.reservations, newReservation]\n      });\n      this.props.history.push(\"/hotels/:id/reservations\");\n    };\n\n    this.updateHotel = async (id, reservationData) => {\n      const updatedReservation = await putReservation(id, reservationData);\n      const changedReservations = this.state.hotels.map(hotel => parseInt(hotel.id) === parseInt(id) ? updatedReservation : hotel);\n      console.log(changedReservations);\n      this.setState({\n        reservations: changedReservations\n      });\n      this.props.history.push(\"/hotels/:id/reservations\");\n    };\n\n    this.state = {\n      reservations: []\n    };\n  }\n\n  componentDidMount() {\n    verifyUser();\n    this.getAllReservations(id);\n  } // READ ALL THE TODOS\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/hotels/:id/reservations\",\n      render: () => React.createElement(CreateReservationList, {\n        reservations: this.state.reservations,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/hotels/:id/reservations/:id\",\n      render: props => React.createElement(SingleReservation, {\n        reservationId: props.match.params.id,\n        reservations: this.state.reservations,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/hotels/:id/reservations/new\",\n      render: () => React.createElement(ReservationForm, {\n        createReservation: this.createReservation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/hotels/:id/reservations/:id/edit\",\n      render: props => React.createElement(UpdateReservationForm, {\n        hotels: this.state.reservations,\n        updateReservations: this.updateReservation,\n        reservationsId: props.match.params.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default withRouter(ReservationContainer); // export default class Reservation extends Component{\n// constructor(props){\n//     super(props);\n//     this.state={\n//         locations: [\"NYC\", \"Italy\", \"Egypt\"],\n//         date: \"\"\n//     }\n// }\n// render(){\n//     return(\n//         <div>\n//              <form className=\"reservationForm\" onSubmit={(e) => this.props.handleLogin(e, this.state)}>\n//             <h3>Book unique places to stay and things to do.</h3>\n//             <label htmlfor=\"Where?\">Where</label>\n//                 <input\n//                     type=\"text\"\n//                     name=\"name\"\n//                     value={this.state.locations[0]}\n//                     onChange={this.props.handleChange}\n//                 />\n//                <label htmlfor=\"\">Check-In</label>\n//                 <input\n//                     type=\"date\"\n//                     name=\"date\"\n//                     value={this.state.date}\n//                 />\n//                  <label htmlfor=\"\">Check-Out</label>\n//                 <input\n//                     type=\"date\"\n//                     name=\"date\"\n//                     value={this.state.date}\n//                 />\n//             </form>\n//         </div>\n//     )\n// }\n// }","map":{"version":3,"sources":["/Users/omniaelglad/Desktop/ruby/Ruby_Project_4/reservation_deluxe/client/src/components/ReservationContainer.js"],"names":["React","Component","Route","withRouter","indexReservations","postReservation","putReservation","verifyUser","CreateReservationList","SingleReservation","ReservationForm","UpdateReservationForm","ReservationContainer","constructor","props","getAllReservations","id","reservations","setState","createReservation","reservationData","console","log","newReservation","hotels","state","history","push","updateHotel","updatedReservation","changedReservations","map","hotel","parseInt","componentDidMount","render","match","params","updateReservation"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\nimport { Route, withRouter } from 'react-router-dom';\nimport {indexReservations, postReservation , putReservation, verifyUser } from '../services/api_helper';\nimport CreateReservationList from './CreateReservationList';\nimport SingleReservation from './SingleReservation';\nimport ReservationForm from './ReservationForm';\nimport UpdateReservationForm from './UpdateReservationForm';\n\n\nclass ReservationContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      reservations: []\n    }\n  }\n\n  componentDidMount() {\n    verifyUser();\n    this.getAllReservations(id);\n  }\n\n  // READ ALL THE TODOS\n  getAllReservations = async (id) => {\n    const reservations = await indexReservations(id);\n    this.setState({ reservations});\n  }\n\n  //CREATE THE TODO\n  createReservation = async (reservationData) => {\n    console.log(reservationData);\n    const newReservation = await postReservation(reservationData);\n    this.setState({\n      hotels: [...this.state.reservations, newReservation]\n    })\n    this.props.history.push(\"/hotels/:id/reservations\");\n  }\n\n  // UPDATE THE TODO\n  updateHotel = async (id,reservationData) => {\n    const updatedReservation = await putReservation(id, reservationData);\n    const changedReservations = this.state.hotels.map(hotel => parseInt(hotel.id) === parseInt(id) ? updatedReservation : hotel);\n    console.log(changedReservations);\n    this.setState({ reservations: changedReservations});\n    this.props.history.push(\"/hotels/:id/reservations\");\n  }\n\n  render() {\n    return (\n      <div>\n        <Route exact path=\"/hotels/:id/reservations\" render={() => (\n          <CreateReservationList\n            reservations={this.state.reservations}\n          />\n        )} />\n        <Route exact path=\"/hotels/:id/reservations/:id\" render={(props) => (\n          <SingleReservation\n          reservationId={props.match.params.id}\n          reservations={this.state.reservations}\n          />\n        )} />\n        <Route path=\"/hotels/:id/reservations/new\" render={() => (\n          <ReservationForm\n            createReservation={this.createReservation}\n          />\n        )} />\n        <Route path=\"/hotels/:id/reservations/:id/edit\" render={(props) => (\n          <UpdateReservationForm\n          hotels={this.state.reservations}\n            updateReservations={this.updateReservation}\n            reservationsId={props.match.params.id}\n          />\n        )} />\n      </div>\n    )\n  }\n}\n\nexport default withRouter(ReservationContainer);\n\n// export default class Reservation extends Component{\n// constructor(props){\n//     super(props);\n//     this.state={\n//         locations: [\"NYC\", \"Italy\", \"Egypt\"],\n//         date: \"\"\n//     }\n// }\n// render(){\n//     return(\n//         <div>\n//              <form className=\"reservationForm\" onSubmit={(e) => this.props.handleLogin(e, this.state)}>\n//             <h3>Book unique places to stay and things to do.</h3>\n//             <label htmlfor=\"Where?\">Where</label>\n//                 <input\n//                     type=\"text\"\n//                     name=\"name\"\n//                     value={this.state.locations[0]}\n//                     onChange={this.props.handleChange}\n//                 />\n//                <label htmlfor=\"\">Check-In</label>\n//                 <input\n//                     type=\"date\"\n//                     name=\"date\"\n//                     value={this.state.date}\n//                 />\n//                  <label htmlfor=\"\">Check-Out</label>\n//                 <input\n//                     type=\"date\"\n//                     name=\"date\"\n//                     value={this.state.date}\n//                 />\n//             </form>\n//         </div>\n//     )\n// }\n\n\n// }"]},"metadata":{},"sourceType":"module"}